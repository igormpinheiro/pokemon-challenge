// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokeChallenge.API.Infra.Persistence;

#nullable disable

namespace PokeChallenge.API.Infra.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240911202946_AddPokemons")]
    partial class AddPokemons
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("PokeChallenge.API.Domain.PokemonMasters.PokemonMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("CPF", "PokeChallenge.API.Domain.PokemonMasters.PokemonMaster.CPF#CPF", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Cpf");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "PokeChallenge.API.Domain.PokemonMasters.PokemonMaster.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Email");
                        });

                    b.HasKey("Id");

                    b.ToTable("PokemonMasters");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMainSeries")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AbilityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("Effects");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EffectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FlingPower")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.ItemAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemAttributes");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseExperience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationAreaEncounters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PokemonMasterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PokemonMasterId");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.PokemonAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AbilityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Slot")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonAbilities");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.PokemonForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBattleOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMega")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonForms");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.PokemonHeldItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rarity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonHeldItems");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.Effect", b =>
                {
                    b.HasOne("PokeChallenge.API.Domain.Pokemons.Ability", "Ability")
                        .WithMany("Effects")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.Item", b =>
                {
                    b.HasOne("PokeChallenge.API.Domain.Pokemons.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.ItemAttribute", b =>
                {
                    b.HasOne("PokeChallenge.API.Domain.Pokemons.Item", "Item")
                        .WithMany("Attributes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.Pokemon", b =>
                {
                    b.HasOne("PokeChallenge.API.Domain.PokemonMasters.PokemonMaster", "PokemonMaster")
                        .WithMany("Pokemons")
                        .HasForeignKey("PokemonMasterId");

                    b.OwnsOne("PokeChallenge.API.Domain.Pokemons.PokemonSprites", "Sprites", b1 =>
                        {
                            b1.Property<int>("PokemonId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("BackDefault")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteBackDefault");

                            b1.Property<string>("BackFemale")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteBackFemale");

                            b1.Property<string>("BackShiny")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteBackShiny");

                            b1.Property<string>("BackShinyFemale")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteBackShinyFemale");

                            b1.Property<string>("FrontDefault")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteFrontDefault");

                            b1.Property<string>("FrontFemale")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteFrontFemale");

                            b1.Property<string>("FrontShiny")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteFrontShiny");

                            b1.Property<string>("FrontShinyFemale")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteFrontShinyFemale");

                            b1.HasKey("PokemonId");

                            b1.ToTable("Pokemons");

                            b1.WithOwner()
                                .HasForeignKey("PokemonId");
                        });

                    b.OwnsOne("PokeChallenge.API.Domain.Pokemons.PokemonCries", "Cries", b1 =>
                        {
                            b1.Property<int>("PokemonId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Latest")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("CryLatest");

                            b1.Property<string>("Legacy")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("CryLegacy");

                            b1.HasKey("PokemonId");

                            b1.ToTable("Pokemons");

                            b1.WithOwner()
                                .HasForeignKey("PokemonId");
                        });

                    b.Navigation("Cries")
                        .IsRequired();

                    b.Navigation("PokemonMaster");

                    b.Navigation("Sprites")
                        .IsRequired();
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.PokemonAbility", b =>
                {
                    b.HasOne("PokeChallenge.API.Domain.Pokemons.Ability", "Ability")
                        .WithMany("PokemonAbilities")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeChallenge.API.Domain.Pokemons.Pokemon", "Pokemon")
                        .WithMany("Abilities")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.PokemonForm", b =>
                {
                    b.HasOne("PokeChallenge.API.Domain.Pokemons.Pokemon", "Pokemon")
                        .WithMany("Forms")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PokeChallenge.API.Domain.Pokemons.PokemonSprites", "Sprites", b1 =>
                        {
                            b1.Property<int>("PokemonFormId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("BackDefault")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteBackDefault");

                            b1.Property<string>("BackFemale")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteBackFemale");

                            b1.Property<string>("BackShiny")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteBackShiny");

                            b1.Property<string>("BackShinyFemale")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteBackShinyFemale");

                            b1.Property<string>("FrontDefault")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteFrontDefault");

                            b1.Property<string>("FrontFemale")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteFrontFemale");

                            b1.Property<string>("FrontShiny")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteFrontShiny");

                            b1.Property<string>("FrontShinyFemale")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("SpriteFrontShinyFemale");

                            b1.HasKey("PokemonFormId");

                            b1.ToTable("PokemonForms");

                            b1.WithOwner()
                                .HasForeignKey("PokemonFormId");
                        });

                    b.Navigation("Pokemon");

                    b.Navigation("Sprites")
                        .IsRequired();
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.PokemonHeldItem", b =>
                {
                    b.HasOne("PokeChallenge.API.Domain.Pokemons.Item", "Item")
                        .WithMany("PokemonHeldItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeChallenge.API.Domain.Pokemons.Pokemon", "Pokemon")
                        .WithMany("HeldItems")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.PokemonMasters.PokemonMaster", b =>
                {
                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.Ability", b =>
                {
                    b.Navigation("Effects");

                    b.Navigation("PokemonAbilities");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.Item", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("PokemonHeldItems");
                });

            modelBuilder.Entity("PokeChallenge.API.Domain.Pokemons.Pokemon", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Forms");

                    b.Navigation("HeldItems");
                });
#pragma warning restore 612, 618
        }
    }
}
